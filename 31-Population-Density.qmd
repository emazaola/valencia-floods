# Population Density

## Cargar librerías
```{r, include=TRUE, warning = FALSE, message = FALSE, echo=FALSE}
# install.packages("pacman")
pacman::p_load(
    sf,
    terra, 
    tidyverse, 
    mapview,
    tidyterra,
    osmdata
    # gganimate, 
    # gstat,
    # DT
)
```
## Área de interés y máscara
El área de trabajo se ha obtenido en 10-AOi y se ha guardado en **geoprocess**.

```{r aoi_name_20}
aoi_name <- c("Valencia")
```

Se carga la zona de estudio tanto en sf como en vector-rast
```{r aoi}
aoi_pop <- rast("../../geoproceso/delivery/GHS_POP/GHS_POP_E2020_Valencia.tif")

AOI_sf <- read_sf("../../geoproceso/delivery/aoi_mask.gpkg")

#AOI <- terra::vect(AOI_sf)
```


## Convertir de raster a puntos

```{r vectorizarPOP, include=TRUE}
pop_points <- as.data.frame(aoi_pop,
                            xy = TRUE,
                            na.rm = TRUE)

pop_points_sf <- st_as_sf(pop_points,
                          coords = c("x", "y"),
                          crs = st_crs(AOI_sf))
```


```{r mapview_pop_points_sf}
mapview(pop_points_sf)
```

## Selección de las ubicaciones óptimas

```{r}
set.seed(123)  # For reproducibility

kmeans_result <- kmeans(pop_points[, c("x", "y")], centers = 8)

```




```{r}

delivery_points <- data.frame(kmeans_result$centers)

delivery_points_sf <- st_as_sf(delivery_points,
                               coords = c("x", "y"),
                               crs =st_crs(AOI_sf))
```


```{r}
delivery_places <- mapview(delivery_points_sf)
delivery_places
```


```{r eval=FALSE}
# Suponiendo que tu mapa en mapview se llama "mi_mapa"
library(leaflet)
library(htmlwidgets)

# Acceder al objeto leaflet
mapa_leaflet <- leaflet::leafletOutput(delivery_places)

# Guardar como HTML
saveWidget(as.widget(mapa_leaflet),
           file = "../../Productos/delivery_places.html")



```


```{r}


   ggplot() +
     geom_sf(data = AOI_sf, fill = NA, color = "black") +
     geom_sf(data = pop_points_sf, 
             aes(color = GHS_POP_E2020),
             size = 0.5) +
  scale_color_gradientn(colors = colorRampPalette(c("wheat", "orange", "brown"))(100),
                         na.value = "grey50") +
     geom_sf(data = delivery_points_sf, color = "red", size = 3) +
     theme_minimal()
```



```{r}
paleta_POP <- colorRampPalette(c("wheat", "orange", "brown"))

ggplot() +
  geom_sf(data = AOI_sf, fill = NA, color = "black") +
  geom_spatraster(data= aoi_pop) +
  scale_fill_gradientn(colors = paleta_POP(100), na.value = "white") +
  #geom_spatraster_contour(data = aoi_pop, breaks = seq(0, 350, 50)) +
     geom_sf(data = delivery_points_sf, color = "red", size = 3) +
     theme_minimal()
```

## Análisis de accesibilidad

```{r}
bbox <- st_bbox(AOI_sf)

roads <- opq(bbox)  |> 
    add_osm_feature(key = "highway")  |> 
    osmdata_sf()
   
road_lines <- roads$osm_lines
```


```{r proyectar_roadsOSM}
road_lines <- road_lines |>
  st_transform(st_crs(AOI_sf))

```


```{r}
#head(names(road_lines))

road_lines <- road_lines |> 
  select(c("osm_id", "osm_id"))

```

```{r}
AOI_sf <- st_make_valid(AOI_sf)
```


```{r}

road_lines <- st_intersection(road_lines,AOI_sf)
```

Filtrar calles aptas para andar

```{r}
for_walk <- c("residential", "pedestrian", "footway", "path", "service", "track", "unclassified")
```

```{r}
   walking_roads <- road_lines %>%
     filter(highway %in% for_walk)
```



```{r}
mapview(road_lines)
```

```{r}
#head(names(road_lines))

road_lines <- road_lines |> 
  select(1:3)

plot(road_lines)
```






## Guardar
```{r guardar_stack_POP, include=TRUE, warning = FALSE, message = FALSE}
writeRaster(AOI_stack,
         paste0("../../geoproceso/delivery/GHS_POP/",
                aoi_name,
                "_GHS_POP.tif"),
         overwrite=TRUE)  # para remplazar
```

```{r guardar_capas_POP, include=TRUE, warning = FALSE, message = FALSE}
# Save the raster stack with their names
for (i in 1:nlyr(AOI_stack)) {
  writeRaster(AOI_stack[[i]], 
              filename = paste0("../../geoproceso/delivery/GHS_POP/",
                                names(AOI_stack)[i], "_",
                                aoi_name,
                                ".tif"),
              overwrite=TRUE)  # para remplazar)
}
```
## Cálculo de diferencias
Se va a calcular la diferencia entre el último año pasado (2020) y las 2 proyecciones futuras existentes (2025 y 2030)

```{r paleta_POP_diff}
paleta_POP_diff <- colorRampPalette(c("brown", "orange","wheat",
                                      "green","blue"))              
```

```{r diferencia_2025-POP}
diff_2025 <- AOI_stack$GHS_POP_E2025 - AOI_stack$GHS_POP_E2020

plot(diff_2025, 
     range=c(-5,15), # para que tengan todos los plt la misma escala
     col=paleta_POP_diff(255),
     1:nlyr(diff_2025)) # plot todas las capas del stack 
```


### Guardar diferencias
```{r guardar_diff25, include=TRUE, warning = FALSE, message = FALSE}
# diferencia 2025
writeRaster(diff_2025,
         paste0("../../geoproceso/delivery/GHS_POP/",
                "diff_2025_",
                aoi_name,
                "_GHS_POP.tif"),
         overwrite=TRUE)


```



